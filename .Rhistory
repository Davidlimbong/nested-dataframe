group_by(name) %>%
summarise(difficulty = mean(difficulty, na.rm = T),
knowledge = mean(knowledge, na.rm = T),
objectives = mean(objectives),
timeliness = mean(timeliness),
satisfaction_score = mean(satisfaction_score)) %>%
ungroup() %>%
arrange(desc(satisfaction_score)) %>%
mutate_if(is.numeric, rescale) %>%
data.frame()
temp
ggradar(temp)
library(extrafont)
ggradar(temp)
temp <- product %>%
filter(name!="Steven Surya",name!="Capstone") %>%
group_by(name) %>%
summarise(difficulty = mean(difficulty, na.rm = T),
knowledge = mean(knowledge, na.rm = T),
objectives = mean(objectives),
timeliness = mean(timeliness),
satisfaction_score = mean(satisfaction_score)) %>%
ungroup() %>%
arrange(desc(satisfaction_score)) %>%
mutate_if(is.numeric, rescale)
ggradar(temp)
temp <- product %>%
filter(name!="Steven Surya",name!="Capstone") %>%
group_by(name) %>%
summarise(difficulty = mean(difficulty, na.rm = T),
knowledge = mean(knowledge, na.rm = T),
objectives = mean(objectives),
timeliness = mean(timeliness),
satisfaction_score = mean(satisfaction_score)) %>%
ungroup() %>%
arrange(desc(satisfaction_score)) %>%
mutate_if(is.numeric, rescale) %>%
group_by(name) %>%
ggradar()
product %>%
filter(name!="Steven Surya",name!="Capstone") %>%
group_by(name) %>%
summarise(difficulty = mean(difficulty, na.rm = T),
knowledge = mean(knowledge, na.rm = T),
objectives = mean(objectives),
timeliness = mean(timeliness),
satisfaction_score = mean(satisfaction_score)) %>%
ungroup() %>%
arrange(desc(satisfaction_score)) %>%
mutate_if(is.numeric, rescale) %>%
group_by(name) %>%
ggradar()
temp <- product %>%
filter(name!="Steven Surya",name!="Capstone") %>%
group_by(name) %>%
summarise(difficulty = mean(difficulty, na.rm = T),
knowledge = mean(knowledge, na.rm = T),
objectives = mean(objectives),
timeliness = mean(timeliness),
satisfaction_score = mean(satisfaction_score)) %>%
ungroup() %>%
arrange(desc(satisfaction_score)) %>%
mutate_if(is.numeric, rescale)
ggradar(temp)
ggradar(temp)
ggradar(temp)+
theme(legend.position = "none")
ggradar(temp)+
theme(legend.position = "top")
ggradar(temp)+
theme(legend.position = "top",
legend.justification = "left")
ggradar(temp)+
theme(legend.position = "top",
legend.justification = "left",
legend.key = element_rect(size = 2))
ggradar(temp)+
theme(        legend.justification = "left",
legend.key = element_rect(size = 2))
ggradar(temp)+
theme(legend.justification = "left",
legend.key = element_rect(size = 2),
legend.position = "bottom")
ggradar(temp)+
theme(legend.justification = "left",
legend.key = element_rect(size = 2),
legend.position = "left")
ggradar(temp)+
theme(legend.justification = "left",
legend.key = element_rect(size = 2),
legend.position = "right")
library(scales)
ggradar(temp)+
theme(legend.justification = "left",
legend.key = element_rect(size = 2),
legend.position = "right")
temp
range(temp$difficulty)
ggradar(temp)+
theme(legend.justification = "left",
legend.key = element_rect(size = 2),
legend.position = "right")
temp <- product %>%
filter(name!="Steven Surya",name!="Capstone") %>%
group_by(name) %>%
summarise(difficulty = mean(difficulty, na.rm = T),
knowledge = mean(knowledge, na.rm = T),
objectives = mean(objectives),
timeliness = mean(timeliness),
satisfaction_score = mean(satisfaction_score)) %>%
ungroup() %>%
arrange(desc(satisfaction_score)) %>%
mutate_if(is.numeric, rescale) %>%
filter(name=="David Tahi Ulubalang")
ggradar(temp)+
theme(legend.justification = "left",
legend.key = element_rect(size = 2),
legend.position = "right")
temp
knitr::opts_chunk$set(cache=TRUE)
options(scipen = 9999)
rm(list=ls())
library(tidyverse)
library(caret)
loan <- read.csv("loan.csv")
glimpse(loan)
loan <- loan %>%
head(-10)
test <- loan %>%
tail(10) %>%
select(-default)
#create Random forest function
RandomForestModel <- function(X, Y){
ctrl <- trainControl(
method = "cv",
number = 3
)
train(
x = X,
y = Y,
trContrl = ctrl,
method = 'rf'
)
}
#create decision tree function
RpartModel <- function(X, Y) {
ctrl <- trainControl(
method = "repeatedcv",
number = 5
)
train(
x = X,
y = Y,
method = 'rpart2',
trControl = ctrl,
tuneGrid = data.frame(maxdepth=c(2,3,4,5)),
preProc = c('center', 'scale')
)
}
model_list <- list(rpart = RpartModel,
rforest = RandomForestModel) %>%
enframe(name = 'modelName',value = 'model')
model_list
nmodel <- length(model_list) #get length of model_list
nested.loan <- list(loan) %>%
rep(nmodel) %>%
enframe(name = "Id", value = "rawdata")
nested.loan
nested.loan <- nested.loan %>%
mutate(train.x = map(rawdata, ~select(.x, -default)),
train.y = map(rawdata, ~.x$default))
nested.loan
nested.loan <- nested.loan %>%
bind_cols(model_list)
nested.loan
nested.loan <- nested.loan %>%
mutate(parm = map2(train.x, train.y, ~list(.x, .y)),
model = invoke_map(model,parm))
nested.loan
nested.loan <- nested.loan %>%
mutate(Accuracy = map_dbl(model, ~max(.x$results$Accuracy))) %>%
arrange(desc(Accuracy))
nested.loan
nested.loan <- test %>%
list() %>%
rep(nrow(nested.loan)) %>%
enframe(name = "Id",value = "test.x") %>%
left_join(nested.loan, by = "Id")
nested.loan
nested.loan <- nested.loan %>%
mutate(pred = map2(model, test.x, ~predict(.x, .y))) %>%
select(Id,modelName,Accuracy,pred)
glimpse(nested.loan$pred)
nested.split <- loan %>%
group_by(checking_balance) %>%
nest(.key = "rawdata") %>%
mutate(train.x = map(rawdata, ~select(.x, -default)),
train.y = map(rawdata, ~.x$default))
nested.split
nested.rf <- nested.split %>%
mutate(param = map2(train.x, train.y, ~list(.x, .y)),
model = invoke_map(RandomForestModel,param))
nested.rf
nested.rf <- nested.rf %>%
mutate(Accuracy = map_dbl(model, ~max(.x$results$Accuracy)))
nested.rf
#replicates nested.split as much the model will be used
nested.multi <- nested.split %>%
list() %>%
rep(nmodel) %>%
bind_rows()
#replicates model_list as much the data frame
model.multi <- model_list %>%
list() %>%
rep(nrow(nested.split)) %>%
bind_rows() %>%
arrange(modelName)
#join nested.multi and model.multi
nested.multi <- nested.multi %>%
bind_cols(model.multi)
nested.multi
nested.multi <- nested.multi %>%
mutate(param = map2(train.x, train.y, ~list(.x, .y)),
model = invoke_map(model,param))
nested.multi
nested.multi <- nested.multi %>%
mutate(Accuracy = map_dbl(model, ~max(.x$results$Accuracy)))
library(lime)
model_result <- lime(x = nested.multi$train.x[[1]],nested.multi$model[[1]])
model_result$bin_continuous
nested.multi$model[1]
nested.multi$model[[0]]
nested.multi$model[[1]]
nested.multi$model[[1]]$modelInfo
nested.multi$model[[1]]$bestTune
nested.multi$model[[1]]$modelInfo
nested.multi$model[[1]]$results
nested.multi$model[[1]]$finalModel
nested.multi$model[[1]]$finalModel$oob.times
nested.multi$model[[1]]$finalModel
# load library
library(tidyverse)
# import data
transaction_truck <- read.csv("transaction_truck.csv")
# quick check
summary(transaction_truck)
unique(truck$grossuser)
# import data
transaction_truck <- read.csv("transaction_truck.csv")
# import data
truck <- read.csv("transaction_truck.csv")
unique(truck$grossuser)
table(truck$grossuser, truck$tarescaleid)
table(truck$grossuser, truck$tareuser)
# quick check
summary(truck)
# your code here :
levels(truck$truckname)
# your code here :
length(levels(truck$truckname))
truck %>%
filter(distance == max(distance))
table(truck$truckid, truck$truckname)
truck %>%
filter(grossweight == max(grossweight))
# your code here :
prop.table(table(truck$companycode))
# your code here :
truck %>%
group_by(truckname) %>%
dplyr::summarise(total_distance = sum(distance)) %>%
arrange(desc(total_distance))
table(truck$companycode, truck$activitytype)
prop.table(table(truck$companycode, truck$activitytype))
# your code here :
truck %>%
mutate(selisih = grossweight - tareweight) %>%
filter(selisih==max(selisih))
truck %>%
mutate(hehe = prevtare - tareweight) %>%
arrange(hehe)
truck %>%
mutate(hehe = prevtare - tareweight) %>%
arrange(hehe) %>%
truck %>%
mutate(hehe = prevtare - tareweight) %>%
arrange(hehe)
truck %>%
mutate(hehe = prevtare - tareweight) %>%
arrange(hehe)
truck %>%
mutate(hehe = tareweight - prevtare) %>%
arrange(hehe)
truck %>%
mutate(hehe = grossweight - tareweight) %>%
arrange(hehe)
truck %>%
mutate(hehe = grossweight - tareweight) %>%
arrange(hehe) %>%
select(hehe)
truck %>%
mutate(hehe = grossweight - tareweight) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe))+
geom_histogram()
truck %>%
mutate(hehe = grossweight - tareweight) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe))+
geom_histogram(bins = 100)
truck %>%
mutate(hehe = grossweight - tareweight) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe))+
geom_histogram(bins = 1000)
truck %>%
mutate(hehe = grossweight - tareweight) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe))+
geom_histogram(bins = 100)
truck %>%
mutate(hehe = tareweight - prevtare) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe))+
geom_histogram(bins = 100)
truck %>%
mutate(hehe = tareweight - prevtare) %>%
arrange(hehe) %>%
select(hehe) %>%
filter(hehe==0)
truck %>%
mutate(hehe = tareweight - prevtare) %>%
arrange(hehe) %>%
select(hehe)
truck %>%
mutate(hehe = tareweight - prevtare) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe)) +
geom_histogram(bins = 100)
truck %>%
mutate(hehe = tareweight - prevtare) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe)) +
geom_histogram(bins = 1000)
truck %>%
mutate(hehe = abs(tareweight - prevtare)) %>%
arrange(hehe) %>%
select(hehe) %>%
ggplot(aes(x = hehe)) +
geom_histogram(bins = 1000)
# your code here :
truck %>%
mutate(selisih = grossweight - tareweight) %>%
filter(selisih==max(selisih))
# quick check
summary(truck)
# your code here :
truck$selisih <- abs(truck$prevtare - truck$tareweight)
plot(xtabs(selisih ~ anr + companycode, retail))
plot(xtabs(selisih ~ anr + companycode, truck))
plot(xtabs(selisih ~ companycode + truckname, truck))
xtabs(selisih ~ companycode + truckname, truck)
glimpse(truck)
xtabs(selisih ~ activitytype + truckname, truck)
glimpse(truck)
xtabs(selisih ~ tareuser + truckname, truck)
plot(xtabs(selisih ~ tareuser + truckname, truck))
plot(xtabs(selisih ~ tareuser + truckname, truck))
plot(xtabs(selisih ~ tareuser + truckname, truck))
knitr::opts_chunk$set(cache=TRUE)
options(scipen = 9999)
rm(list=ls())
knitr::opts_chunk$set(cache=TRUE)
options(scipen = 9999)
rm(list=ls())
library(tidyverse)
library(caret)
loan <- read.csv("loan.csv")
glimpse(loan)
#create Random forest function
RandomForestModel <- function(X, Y){
ctrl <- trainControl(
method = "cv",
number = 3
)
train(
x = X,
y = Y,
trContrl = ctrl,
method = 'rf'
)
}
#create decision tree function
RpartModel <- function(X, Y) {
ctrl <- trainControl(
method = "repeatedcv",
number = 5
)
train(
x = X,
y = Y,
method = 'rpart2',
trControl = ctrl,
tuneGrid = data.frame(maxdepth=c(2,3,4,5)),
preProc = c('center', 'scale')
)
}
model_list <- list(rpart = RpartModel,
rforest = RandomForestModel) %>%
enframe(name = 'modelName',value = 'model')
model_list
nmodel <- length(model_list) #get length of model_list
nested.loan <- list(loan) %>%
rep(nmodel) %>%
enframe(name = "Id", value = "rawdata")
nested.loan
nested.loan <- nested.loan %>%
mutate(train.x = map(rawdata, ~select(.x, -default)),
train.y = map(rawdata, ~.x$default))
nested.loan
nested.loan <- nested.loan %>%
bind_cols(model_list)
nested.loan
nested.loan <- nested.loan %>%
mutate(parm = map2(train.x, train.y, ~list(.x, .y)),
model = invoke_map(model,parm))
nested.loan
nested.loan <- nested.loan %>%
mutate(Accuracy = map_dbl(model, ~max(.x$results$Accuracy))) %>%
arrange(desc(Accuracy))
nested.loan
nested.loan <- test %>%
list() %>%
rep(nrow(nested.loan)) %>%
enframe(name = "Id",value = "test.x") %>%
left_join(nested.loan, by = "Id")
nested.multi %>%
map(model, ~bind_cols(.x$results))
nested.multi <- nested.multi %>%
mutate(param = map2(train.x, train.y, ~list(.x, .y)),
model = invoke_map(model,param))
knitr::opts_chunk$set(cache=TRUE)
options(scipen = 9999)
rm(list=ls())
library(tidyverse)
library(caret)
loan <- read.csv("loan.csv")
glimpse(loan)
#create Random forest function
RandomForestModel <- function(X, Y){
ctrl <- trainControl(
method = "cv",
number = 3
)
train(
x = X,
y = Y,
trContrl = ctrl,
method = 'rf'
)
}
#create decision tree function
RpartModel <- function(X, Y) {
ctrl <- trainControl(
method = "repeatedcv",
number = 5
)
train(
x = X,
y = Y,
method = 'rpart2',
trControl = ctrl,
tuneGrid = data.frame(maxdepth=c(2,3,4,5)),
preProc = c('center', 'scale')
)
}
model_list <- list(rpart = RpartModel,
rforest = RandomForestModel) %>%
enframe(name = 'modelName',value = 'model')
model_list
nmodel <- length(model_list) #get length of model_list
nested.loan <- list(loan) %>%
rep(nmodel) %>%
enframe(name = "Id", value = "rawdata")
nested.loan
nested.loan <- nested.loan %>%
mutate(train.x = map(rawdata, ~select(.x, -default)),
train.y = map(rawdata, ~.x$default))
nested.loan
nested.loan <- nested.loan %>%
bind_cols(model_list)
nested.loan
nested.loan <- nested.loan %>%
mutate(parm = map2(train.x, train.y, ~list(.x, .y)),
model = invoke_map(model,parm))
nested.loan
nested.loan <- nested.loan %>%
mutate(Accuracy = map_dbl(model, ~max(.x$results$Accuracy))) %>%
arrange(desc(Accuracy))
nested.loan
nested.loan <- test %>%
list() %>%
rep(nrow(nested.loan)) %>%
enframe(name = "Id",value = "test.x") %>%
left_join(nested.loan, by = "Id")
